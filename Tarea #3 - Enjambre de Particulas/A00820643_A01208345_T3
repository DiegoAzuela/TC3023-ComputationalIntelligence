{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"A00820643_A01208345_T3","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO50+4QGkwera6SXsfkP0mC"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"A99D7QvQMTaj","executionInfo":{"status":"ok","timestamp":1622135273106,"user_tz":300,"elapsed":466,"user":{"displayName":"Diego Azuela","photoUrl":"","userId":"18307101454027383455"}}},"source":["import math\n","import numpy as np\n","import pandas as pd\n","from numpy.random import random\n","from sklearn.metrics import mean_squared_error"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"UZsa9flYMWNI","executionInfo":{"status":"ok","timestamp":1622135273112,"user_tz":300,"elapsed":31,"user":{"displayName":"Diego Azuela","photoUrl":"","userId":"18307101454027383455"}}},"source":["n_particulas = 10\n","coef = 4\n","alpha = 1\n","beta = 1\n","max_magnitud_vel = 1\n","iter = 100\n","df = pd.DataFrame({'x':list(range(2,21,2),),'f(x)':[26,-1,4,20,0,-2,19,1,-4,19]})"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"5vLMFsIPMWIT","executionInfo":{"status":"ok","timestamp":1622135273115,"user_tz":300,"elapsed":27,"user":{"displayName":"Diego Azuela","photoUrl":"","userId":"18307101454027383455"}}},"source":["def funcion(x,theta): \n","  return theta[0]/(x**2) + theta[1]*np.exp(theta[2]/x) + theta[3]*math.sin(x)"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"X32J1QugMYpO","executionInfo":{"status":"ok","timestamp":1622135273116,"user_tz":300,"elapsed":24,"user":{"displayName":"Diego Azuela","photoUrl":"","userId":"18307101454027383455"}}},"source":["def evaluar(theta):\n","  eval = list(map(lambda x: funcion(x,theta),df['x'].values.tolist()))\n","  return mean_squared_error(df['f(x)'].values, eval)"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"MSE1WbFyLTmO","executionInfo":{"status":"ok","timestamp":1622135273224,"user_tz":300,"elapsed":128,"user":{"displayName":"Diego Azuela","photoUrl":"","userId":"18307101454027383455"}}},"source":["#Se generan las posiciones iniciales de las particulas\n","#valores entre 0 y 15 con n_particulas y coef dimenciones\n","pos_particulas = np.random.randint(0, 16, size=(n_particulas, coef)).astype(np.float32)\n","#Se generan velocidades en 0 con la estructura de vector igual a las particulas\n","vel_particulas = np.zeros_like(pos_particulas) \n","#Mejores locales\n","loc_particulas = np.copy(pos_particulas)\n","#Evaluacion de las particulas con n_particulas y 2 dimensiones\n","eval_particulas = np.empty(shape=(n_particulas, 2))\n","#Se llenan los valores de las evaluaciones el local y el de los valores actuales\n","eval_particulas[:,0] = list(map(evaluar,pos_particulas))\n","eval_particulas[:,1] = eval_particulas [:,0]\n","\n","#Seleccionar el id de la mejor de las particulas\n","idx_min = np.argmin(eval_particulas[:, 1])\n","#Mejor evaluacion global\n","mejor_global = loc_particulas[idx_min]\n","#Mejor evaluacion\n","mejor_eval = eval_particulas[:,1][idx_min]"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Au4MrNLQMckN","executionInfo":{"status":"ok","timestamp":1622135274596,"user_tz":300,"elapsed":1378,"user":{"displayName":"Diego Azuela","photoUrl":"","userId":"18307101454027383455"}},"outputId":"4be9ef90-d59c-4dff-b1a1-077a07109802"},"source":["for i in range(iter):\n","  vel_particulas += alpha * random(size=(n_particulas, coef)) * \\\n","                  mejor_global -  pos_particulas + \\\n","                  alpha * random(size=(n_particulas, coef)) * \\\n","                  loc_particulas - pos_particulas\n","\n","  magnitudes = np.linalg.norm(vel_particulas, axis=1)\n","  excesos_vel = np.argwhere(magnitudes > max_magnitud_vel)\n","  magnitudes = np.expand_dims(np.repeat(magnitudes[excesos_vel].reshape(-1,1),coef,axis=1),axis=1)\n","  vel_particulas[excesos_vel] = max_magnitud_vel * np.divide(vel_particulas[excesos_vel],magnitudes)\n","  pos_particulas += vel_particulas\n","  pos_particulas = np.clip(pos_particulas,0,15)\n","  eval_particulas[:,0] = list(map(evaluar,pos_particulas))\n","\n","  idx_min = np.argmin(eval_particulas,axis=1)\n","  eval_particulas[:,1] = eval_particulas[np.arange(len(eval_particulas)),idx_min]\n","  idx_min = np.where(idx_min==0)\n","  loc_particulas[idx_min] = pos_particulas[idx_min]\n","  idx_min = np.argmin(eval_particulas[:,1])\n","  mejor_global = loc_particulas[idx_min,:]\n","  mejor_eval = loc_particulas[idx_min,1]\n","  print('mejor ahora', mejor_global, 'error:', mejor_eval)\n","\n","print(list(zip(df['f(x)'].values,\n","               np.asarray(list(map(lambda x: funcion(x,mejor_global)\n","               , df['x'].values.tolist()))).round(1))))"],"execution_count":6,"outputs":[{"output_type":"stream","text":["mejor ahora [ 4.5358005 11.414168   0.        12.33568  ] error: 11.414168\n","mejor ahora [ 4.4269466 10.678171   0.        11.667504 ] error: 10.678171\n","mejor ahora [ 4.0268025 10.087427   0.        10.966858 ] error: 10.087427\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","mejor ahora [ 3.7355964  9.413131   0.        10.2882395] error: 9.413131\n","[(26, 19.7), (-1, 1.9), (4, 6.6), (20, 19.7), (0, 3.9), (-2, 3.9), (19, 19.6), (1, 6.5), (-4, 1.7), (19, 18.8)]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dJFvqqUsMfk-","executionInfo":{"status":"ok","timestamp":1622135274598,"user_tz":300,"elapsed":28,"user":{"displayName":"Diego Azuela","photoUrl":"","userId":"18307101454027383455"}}},"source":["def velocidad(particulas, velocidades,mejor_global,local_best):  \n","  for particle in range(nv):\n","    epsilon_1 = np.random.rand(2) #vectores aleatorios con valores entre 0 y 1, size:tbd\n","    epsilon_2 = np.random.rand(2) #vectores aleatorios con valores entre 0 y 1, size:tbd\n","    #Particle velocity\n","    new_vel = velocidades[particle] + (alpha*epsilon_1*(mejor_global-particulas[particle])) + beta*epsilon_2*(local_best-particulas[particle])\n","    #Enforce boundaries \n","    #Se necesita evaluar la magnitud\n","    if magnitud(new_vel) > Vmax:\n","      new_vel[0] = new_vel[0]/magnitud(new_vel)*Vmax\n","      new_vel[1] = new_vel[1]/magnitud(new_vel)*Vmax\n","    list_vel.append(new_vel)\n","    velocidades[particle] = new_vel\n","    \n","  return new_vel"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"miubabtRMfev","executionInfo":{"status":"ok","timestamp":1622135274599,"user_tz":300,"elapsed":25,"user":{"displayName":"Diego Azuela","photoUrl":"","userId":"18307101454027383455"}},"outputId":"269c955f-5272-4756-e26c-2409dfd83fac"},"source":["def magnitud(velocidad):\n","  return math.sqrt(velocidad[0]**2 + velocidad[1]**2)\n","\n","np.random.rand(2)"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.38083979, 0.2087033 ])"]},"metadata":{"tags":[]},"execution_count":8}]}]}