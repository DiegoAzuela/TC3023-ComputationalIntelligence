{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"A00820643_A01208345_T4","provenance":[],"collapsed_sections":["_JKIvVB0mHlt","DWLondi_sEPc","I_-X6AgXd7qT","m803RshfOmyr","xuO7NhT0Ot_z","kFJ34WfhO0ri","vP2y6yI7O79q","t5o-CjI0PCuk","c7mEGzDXbR1H","8uR32XDUqQZx"],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"_JKIvVB0mHlt"},"source":["# **INSTRUCCIONES**"]},{"cell_type":"markdown","metadata":{"id":"imFGkWzLodvZ"},"source":["1. Resolver el problema de la mochila con los siguientes datos. El peso máximo es 165 kg. Los parámetros para el algoritmo quedan a discreción del alumno. Realizar la penalización fuera de la función de evaluación (usar decorator para penalización).\n","2. Correr al menos 10 veces cada uno de los 3 algoritmos durante al menos 50 iteraciones y almacenar los resultados. \n","    * eaSimple\n","    * eaMuPlusLambda\n","    * eaMuCommaLambda\n","\n","3. Desarrollar el reporte de la actividad."]},{"cell_type":"markdown","metadata":{"id":"u4W4K9JUNyOa"},"source":["# **DESARROLLO CÓDIGO**\n"]},{"cell_type":"markdown","metadata":{"id":"m803RshfOmyr"},"source":["## Inicialización de datos"]},{"cell_type":"code","metadata":{"id":"wFW0E4MKqPwo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619309322415,"user_tz":300,"elapsed":10005,"user":{"displayName":"Diego Azuela","photoUrl":"","userId":"18307101454027383455"}},"outputId":"b73681b8-f458-469a-a093-6ff973824065"},"source":["pip install deap"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: deap in /usr/local/lib/python3.7/dist-packages (1.3.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from deap) (1.19.5)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"56JRvdcHOJf5"},"source":["from deap import base, creator\n","from deap import algorithms\n","from deap import tools\n","import numpy as np\n","import random\n","import matplotlib.pyplot as plt\n","import pandas as pd"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1fVnHu-oOMFO"},"source":["w = [23, 31, 29, 44, 53, 38, 63, 85, 89, 82]\n","p = [92, 57, 49, 68, 60, 43, 67, 84, 87, 72]\n","\n","w_max = 165"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xuO7NhT0Ot_z"},"source":["## Definición de funciones\n"]},{"cell_type":"code","metadata":{"id":"9KwJFLewON0u"},"source":["def func_eval(u):\n","    \"\"\"\n","    En esta funcion se calcula la evaluacion\n","\n","    :param u:\n","    :return:\n","    \"\"\"\n","    fu = np.sum(np.asarray(u) * np.asarray(p))\n","    return fu,"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"y4pmkZlVqfrS"},"source":["def func_evalv(u):\n","    \"\"\"\n","    En esta funcion se calcula la evaluacion\n"," \n","    :param u:\n","    :return:\n","    \"\"\"\n","    fu = np.sum(np.asarray(u) * np.asarray(p))\n","    return fu"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UCbsHhw0OPk0"},"source":["def peso(u):\n","    \"\"\"\n","    En esta función se calcula que el peso del individuo se encuentre dentro de los valores permitidos\n","\n","    :param u:\n","    :return:\n","    \"\"\"\n","    wi = np.sum(np.asarray(u) * np.asarray(w))\n","    if (wi < w_max):\n","        return True\n","    return False"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"J2YP3Y5EPj5v"},"source":["def convertir_datos(log):\n","  # Convertir a DataFrame los datos obtenidos\n","  df_log = pd.DataFrame(log[1])\n","  df_log = df_log.apply(pd.Series)\n","  # Obtener los valores 'max' para graficarlos\n","  max_element = 0\n","  for i in range(len(df_log)):\n","      if (df_log['max'][i] > max_element):\n","        max_element = df_log['max'][i]\n","      elif (df_log['max'][i] <  max_element):\n","        df_log['max'][i] = max_element\n","  return df_log"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-hsTGEa0Pqde"},"source":["def graficar_datos(log):\n","  # Graficar los valores máximos\n","  df_log = convertir_datos(log)\n","  plt.plot(df_log['gen'], df_log['max'])\n","  plt.xlabel('Generaciones')\n","  plt.ylabel('Valor máximo obtenido')\n","  plt.title('eaSimple Mayor Valor Encontrado')\n","  plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kFJ34WfhO0ri"},"source":["## Definición de parámetros"]},{"cell_type":"code","metadata":{"id":"7vQqr-_IOSYH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619309322423,"user_tz":300,"elapsed":9931,"user":{"displayName":"Diego Azuela","photoUrl":"","userId":"18307101454027383455"}},"outputId":"bd84e268-13f0-40bd-f84c-75914e799c28"},"source":["# Definir si es un problema de maximizar o minimizar.\n","creator.create(\"FitnessMin\", base.Fitness, weights=(1.0,))\n","# Definir que los individuos son listas y que se va a maximizar.\n","creator.create(\"Individual\", list, fitness=creator.FitnessMin)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/deap/creator.py:141: RuntimeWarning:\n","\n","A class named 'FitnessMin' has already been created and it will be overwritten. Consider deleting previous creation of that class or rename it.\n","\n","/usr/local/lib/python3.7/dist-packages/deap/creator.py:141: RuntimeWarning:\n","\n","A class named 'Individual' has already been created and it will be overwritten. Consider deleting previous creation of that class or rename it.\n","\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"iNvL-TfXOV4L"},"source":["toolbox = base.Toolbox()\n","# Seleccionar la función de selección.\n","toolbox.register(\"select\", tools.selRoulette)\n","# Seleccionar la función de mutación.\n","toolbox.register(\"mutate\", tools.mutFlipBit, indpb=0.1)\n","# Seleccionar el de reproducción.\n","toolbox.register(\"mate\", tools.cxOnePoint)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cOQ2olXhOXm7"},"source":["# Definir la función de evaluación.\n","toolbox.register(\"evaluate\", func_eval)\n","# Definir la penalización por el peso\n","toolbox.decorate(\"evaluate\", tools.DeltaPenalty(peso,1)) #Se puede agregar la función de distancia\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N3uP3oGLOaMk"},"source":["# Definir un elemento del individuo.\n","toolbox.register(\"attribute\", random.randint, a=0, b=1)\n","# Definiendo la creación de individuos como una lista de n elementos.\n","toolbox.register(\"individual\", tools.initRepeat, creator.Individual, toolbox.attribute, n=10)\n","# Definiendo la creación de la población.\n","toolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vP2y6yI7O79q"},"source":["## Especificación de estadisticas"]},{"cell_type":"code","metadata":{"id":"P8x3_UewOboz"},"source":["pop = toolbox.population(n=10)\n","\n","stats = tools.Statistics(key=lambda ind: ind.fitness.values)\n","stats.register(\"max\", np.max)\n","stats.register(\"min\", np.min)\n","stats.register(\"avg\", np.mean)\n","stats.register(\"std\", np.std)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t5o-CjI0PCuk"},"source":["## Especificación de "]},{"cell_type":"code","metadata":{"id":"SPvu9KzNOfPe"},"source":["hof = tools.HallOfFame(3)\n","#Numero de individuos a seleccionar para la próxima generación\n","mu = 2\n","#Número de hijos que se producen el cada generación\n","lamb = 8"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2d6SHiSOPHVs"},"source":["## Corridas de algorimos"]},{"cell_type":"code","metadata":{"id":"EKL-cCb0Of2j"},"source":["simple = []\n","plus = []\n","comma = []\n"," \n","for experiment in range(10):\n","    #Algoritmos con 50 generaciones para que sean 50 iteraciones\n","    hof1 = tools.HallOfFame(1)\n","    hof2 = tools.HallOfFame(1)\n","    hof3 = tools.HallOfFame(1)\n","    for iteracion in range(50):\n","        #Algoritmo eaSimple\n","        log1 = algorithms.eaSimple(population=pop, toolbox=toolbox, halloffame=hof1, cxpb=1.0, mutpb=1.0,\n","                                    ngen=10, stats=stats, verbose=False)\n","        val = func_evalv(hof1[0])\n","        simple.append([experiment, iteracion, val])\n","       \n","        #Algoritmo eaMuPlusLambda\n","        log2 = algorithms.eaMuPlusLambda(population=pop, toolbox=toolbox, halloffame=hof2, mu=mu, lambda_=lamb, cxpb=0.5, mutpb=0.5,\n","                            ngen=10, stats=stats, verbose=False)\n","        plus.append([experiment, iteracion, func_evalv(hof2[0])])\n","        \n","        #Algoritmo eaMuCommaLambda\n","        log3 = algorithms.eaMuCommaLambda(population=pop, toolbox=toolbox, halloffame=hof3, mu=mu, lambda_=lamb, cxpb=0.5, mutpb=0.5,\n","                            ngen=10, stats=stats, verbose=False)\n","        comma.append([experiment, iteracion, func_evalv(hof3[0])])\n","    hof1.clear()\n","    hof2.clear()\n","    hof3.clear()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iN7u4h9So_9d"},"source":["## Graficar"]},{"cell_type":"code","metadata":{"id":"SwK3ilj2Y3rZ","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1619309448595,"user_tz":300,"elapsed":947,"user":{"displayName":"Diego Azuela","photoUrl":"","userId":"18307101454027383455"}},"outputId":"842b268a-f160-467c-ce12-81a1fa063105"},"source":["simpleDf = pd.DataFrame(simple, columns = ['Experiment', 'Iteration', 'Value'])\n","commaDf = pd.DataFrame(comma, columns = ['Experiment', 'Iteration', 'Value'])\n","plusDf = pd.DataFrame(plus, columns = ['Experiment', 'Iteration', 'Value'])\n"," \n","simpledf = commadf = plusdf = []\n","for x in range(10):\n","    simpledf.append(pd.DataFrame(simpleDf[(simpleDf['Experiment'] == x)]))\n","    plusdf.append(pd.DataFrame(plusDf[(plusDf['Experiment'] == x)]))\n","    commadf.append(pd.DataFrame(commaDf[(commaDf['Experiment'] == x)]))\n"," \n","plt.subplot(1,3,1)\n","plt.xlabel('Iteraciones')\n","plt.ylabel('Valor máximo obtenido')\n","plt.title('eaSimple')\n","for x in range(10):\n","    plt.plot(simpledf[x]['Iteration'], simpledf[x]['Value'], label = \"Experiment\"+str(x))\n"," \n","plt.subplot(1,3,2)\n","plt.xlabel('Iteraciones')\n","plt.ylabel('Valor máximo obtenido')\n","plt.title('eaMuPlusLambda')\n","for x in range(10):\n","    plt.plot(plusdf[x]['Iteration'], plusdf[x]['Value'], label = \"Experiment\"+str(x))\n"," \n","plt.subplot(1,3,3)\n","plt.xlabel('Iteraciones')\n","plt.ylabel('Valor máximo obtenido')\n","plt.title('eaMuCommaLambda')\n","for x in range(10):\n","    plt.plot(commadf[x]['Iteration'], commadf[x]['Value'], label = \"Experiment\"+str(x))\n"," \n"," \n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 3 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"c7mEGzDXbR1H"},"source":["# **BIBLIOGRAFÍAS**"]},{"cell_type":"markdown","metadata":{"id":"MdFc8FXcbVhC"},"source":["    * https://deap.readthedocs.io/en/master/tutorials/advanced/constraints.html\n","    * https://github.com/DEAP/deap/blob/master/deap/algorithms.py"]}]}